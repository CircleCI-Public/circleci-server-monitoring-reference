version: 2.1

orbs:
  slack: circleci/slack@5.1.1

executors:
  deploy:
    docker:
      - image: cimg/deploy:2025.01
    resource_class: medium
  linux-vm:
    machine:
      image: ubuntu-2204:current
    resource_class: medium
    shell: /bin/bash -i -eo pipefail

workflows:
  main-workflow:
    jobs:
      - lint
      - test
      - docs
      - smoke-tests

jobs:
  lint:
    executor: deploy
    steps:
      - checkout
      - run: helm dependency update
      - run:
          command: helm template --debug .
          when: always
      - run:
          command: helm lint --strict
          when: always
      - run:
          command: ./do kubeconform
          when: always
      - notify_failing_main

  test:
    executor: deploy
    steps:
      - checkout
      - run: ./do unit-tests

  docs:
    executor: linux-vm
    steps:
      - checkout
      - run: ./do helm-docs
      - run:
          name: Check for uncommitted helm-docs changes
          command: |
            if [ -n "$(git diff --exit-code)" ]; then
              echo "Detected uncommitted changes after running ./do helm-docs. Please run './do helm-docs' locally and commit the changes."
              exit 1
            else
              echo "No uncommitted changes detected."
            fi

  smoke-tests:
    executor: linux-vm
    steps:
      - run:
          name: Install MicroK8s and Helm
          command: |
            sudo apt-get update && sudo apt install snapd -y
            sudo snap install microk8s --classic --channel=1.32
            sudo snap install helm --classic
            sudo microk8s enable dns
      - run: sudo microk8s status --wait-ready
      - checkout
      - run:
          name: Set up kubectl and kubeconfig
          command: |
            echo "alias kubectl='sudo microk8s kubectl'" >> ~/.bashrc
            mkdir -p ~/.kube
            chmod 0700 ~/.kube
            sudo microk8s kubectl config view --raw >"$HOME/.kube/config"
      - run:
          name: Create namespace
          command: |
            kubectl create ns circleci-server-monitoring
            kubectl config set-context --current --namespace circleci-server-monitoring
      - run:
          name: Install dependencies
          command: |
            helm install circleci-server-monitoring-stack . --dependency-update -n circleci-server-monitoring \
              --set global.enabled=false --set prometheusOperator.installCRDs=true
      - run:
          name: Install Helm chart
          command: helm upgrade --install circleci-server-monitoring-stack . --reset-values --timeout=2m -n circleci-server-monitoring
      - run:
          name: Watch Pods
          command: kubectl get pods -w
          background: true
      - run:
         name: Wait for Prometheus
         command: kubectl wait --for=jsonpath='{.subsets[*].addresses}' endpoints/server-monitoring-prometheus --timeout=2m
      - run:
          name: Port-forward Prometheus
          command: kubectl port-forward svc/server-monitoring-prometheus 9090
          background: true
      - run:
          name: Check Prometheus status
          command: |
            curl --retry 5 --retry-connrefused --retry-max-time 120 http://localhost:9090/api/v1/status/buildinfo
      - run:
          name: Wait for Grafana
          command: kubectl wait --for=jsonpath='{.subsets[*].addresses}' endpoints/server-monitoring-grafana-service --timeout=2m
      - run:
          name: Port-forward Grafana
          command: kubectl port-forward svc/server-monitoring-grafana-service 3000
          background: true
      - run:
          name: Check Grafana's Prometheus data source is healthy
          command: |
            for i in {1..30}; do
              id=$(curl --retry 5 --retry-connrefused -s -u admin:admin "http://localhost:3000/api/datasources/id/Prometheus" | jq -r '.id')
              echo "Got ID ${id} for Prometheus. Checking status:"
              status=$(curl -s -u admin:admin "http://localhost:3000/api/datasources/${id}/health" | jq -r '.status')
              [ "${status}" == "OK" ] && echo "Prometheus data source is healthy." && exit 0
              echo "Got status ${status}. Retrying..."
              sleep 10
            done
            echo "Prometheus data source is not healthy: ${status}"
            exit 1
      - run:
          name: Describe Pods on failure
          command: kubectl describe pods & exit 1
          when: on_fail
      - run:
          name: Uninstall Helm chart
          command: helm uninstall circleci-server-monitoring-stack -n circleci-server-monitoring

commands:
  notify_failing_main:
    steps:
      - slack/notify:
          channel: server-alerts
          branch_pattern: main
          event: fail
          template: basic_fail_1
