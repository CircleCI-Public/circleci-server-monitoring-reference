version: 2.1

orbs:
  slack: circleci/slack@5.1.1

executors:
  deploy:
    docker:
      - image: cimg/deploy:2025.01
    resource_class: medium
  gh:
    docker:
      - image: maniator/gh:latest
    resource_class: medium
  linux-vm:
    machine:
      image: ubuntu-2204:current
    resource_class: medium
    shell: /bin/bash -i -eo pipefail

workflows:
  main-workflow:
    jobs:
      - lint
      - unit-tests
      - docs
      - package-chart:
          requires: [lint, unit-tests, docs]
          context: runner-signing
      - smoke-tests
      - approve-deploy-chart:
          type: approval
          filters:
            branches:
              only: main
          requires: [package-chart, smoke-tests]
      - deploy-chart:
          requires: [approve-deploy-chart]
          context: runner-deploy
      - create-release:
          requires: [approve-deploy-chart]
          context: runner-deploy

jobs:
  lint:
    executor: deploy
    steps:
      - checkout
      - run: helm dependency update
      - run:
          command: helm template --debug .
          when: always
      - run:
          command: helm lint --strict
          when: always
      - run:
          command: ./do kubeconform
          when: always
      - notify_failing_main

  unit-tests:
    executor: deploy
    steps:
      - checkout
      - run: ./do unit-tests
      - notify_failing_main

  docs:
    executor: linux-vm
    steps:
      - checkout
      - run: ./do helm-docs
      - run:
          name: Check for uncommitted helm-docs changes
          command: |
            if [ -n "$(git diff --exit-code)" ]; then
              echo "Detected uncommitted changes after running ./do helm-docs. Please run './do helm-docs' locally and commit the changes."
              exit 1
            else
              echo "No uncommitted changes detected."
            fi
      - notify_failing_main

  package-chart:
    executor: deploy
    steps:
      - checkout
      - run:
          name: Install signing keys
          command: |
            exec 2>/dev/null

            echo "Importing signing keys"
            echo -n "${SIGNING_KEY_ENCODED}" | base64 --decode >signing_key_decoded.key
            gpg --batch --yes --passphrase "${SIGNING_KEY_PASSPHRASE}" --import signing_key_decoded.key
            rm signing_key_decoded.key
            curl https://keys.openpgp.org/vks/v1/by-fingerprint/"${GPG_ID}" >pub-key.asc
            gpg --import pub-key.asc
            rm pub-key.asc

            echo "Convert to legacy gpg format per Helm requirements"
            gpg --export >~/.gnupg/pubring.gpg
            gpg --batch --yes --pinentry-mode=loopback --passphrase "${SIGNING_KEY_PASSPHRASE}" --export-secret-keys "${GPG_ID}" >~/.gnupg/secring.gpg
      - run:
          name: Package and sign chart
          command: |
            echo "${SIGNING_KEY_PASSPHRASE}" | ./do package-chart sign --passphrase-file -
      - run:
          name: List contents of Helm package
          command: tar -tvf "./target/server-monitoring-stack-$(./do version).tgz"
      - when:
          condition:
            equal: [<< pipeline.git.branch >>, main]
          steps:
            - persist_to_workspace:
                root: .
                paths: [./target]
      - notify_failing_main

  deploy-chart:
    executor: deploy
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Install package_cloud
          command: |
            sudo apt-get update && sudo apt-get install ruby-rubygems -y
            sudo gem install --no-document package_cloud
      - run:
          name: Publish Helm chart
          command: |
            package_cloud push circleci/server-monitoring-stack/helm/v1 \
              ./target/server-monitoring-stack-"$(./do version)".tgz
      - run:
          name: "Push failed: Have you bumped the chart version?"
          command: |
            echo "Push failed; this may be because the chart version already exists. Consider the following options:"
            echo "1) Bump the version in Chart.yaml, run ./do helm-docs, and commit the changes."
            echo "2) Manually yank the version if you need to overwrite it."
            exit 1
          when: on_fail
      - notify_deploy:
          header: ":helm::server::grafana: Server monitoring Helm chart published"
          version: "$(./do version)"
      - notify_failing_main

  create-release:
    executor: gh
    steps:
      - checkout
      - run: apk add --no-cache bash
      - run:
          name: Create Release
          command: gh release create "$(./do version)" -R "CircleCI-Public/circleci-server-monitoring-reference"
      - notify_failing_main

  smoke-tests:
    executor: linux-vm
    steps:
      - run:
          name: Install MicroK8s and Helm
          command: |
            sudo apt-get update && sudo apt install snapd -y
            sudo snap install microk8s --classic --channel=1.32
            sudo snap install helm --classic
            sudo microk8s enable dns
      - run: sudo microk8s status --wait-ready
      - checkout
      - run:
          name: Set up kubectl and kubeconfig
          command: |
            echo "alias kubectl='sudo microk8s kubectl'" >> ~/.bashrc
            mkdir -p ~/.kube
            chmod 0700 ~/.kube
            sudo microk8s kubectl config view --raw >"$HOME/.kube/config"
      - run:
          name: Create namespace
          command: |
            kubectl create ns server-monitoring
            kubectl config set-context --current --namespace server-monitoring
      - run: ./do package-chart
      - run:
          name: Install dependencies
          command: |
            helm install server-monitoring-stack ./target/server-monitoring-stack*.tgz \
              -n server-monitoring --set global.enabled=false --set prometheusOperator.installCRDs=true
      - run:
          name: Install Helm chart
          command: helm upgrade --install server-monitoring-stack . --reset-values --timeout=2m -n server-monitoring
      - run:
          name: Watch Pods
          command: kubectl get pods -w
          background: true
      - run:
         name: Wait for Prometheus
         command: kubectl wait --for=jsonpath='{.subsets[*].addresses}' endpoints/server-monitoring-prometheus --timeout=2m
      - run:
          name: Port-forward Prometheus
          command: kubectl port-forward svc/server-monitoring-prometheus 9090
          background: true
      - run:
          name: Check Prometheus status
          command: |
            curl --retry 5 --retry-connrefused --retry-max-time 120 http://localhost:9090/api/v1/status/buildinfo
      - run:
          name: Wait for Grafana
          command: kubectl wait --for=jsonpath='{.subsets[*].addresses}' endpoints/server-monitoring-grafana-service --timeout=2m
      - run:
          name: Port-forward Grafana
          command: kubectl port-forward svc/server-monitoring-grafana-service 3000
          background: true
      - run:
          name: Check Grafana's Prometheus data source is healthy
          command: |
            for i in {1..30}; do
              id=$(curl --retry 5 --retry-connrefused -s -u admin:admin "http://localhost:3000/api/datasources/id/Prometheus" | jq -r '.id')
              echo "Got ID ${id} for Prometheus. Checking status:"
              status=$(curl -s -u admin:admin "http://localhost:3000/api/datasources/${id}/health" | jq -r '.status')
              [ "${status}" == "OK" ] && echo "Prometheus data source is healthy." && exit 0
              echo "Got status ${status}. Retrying..."
              sleep 10
            done
            echo "Prometheus data source is not healthy: ${status}"
            exit 1
      - run:
          name: Describe Pods on failure
          command: kubectl describe pods & exit 1
          when: on_fail
      - run:
          name: Uninstall Helm chart
          command: helm uninstall server-monitoring-stack -n server-monitoring

commands:
  notify_failing_main:
    steps:
      - slack/notify:
          channel: server-alerts
          branch_pattern: main
          event: fail
          template: basic_fail_1

  notify_deploy:
    parameters:
      header:
        type: string
      version:
        type: string
    steps:
      - run:
          name: Set environment for notification
          command: |
            echo "export HEADER_TEXT='<< parameters.header >>'" >> "$BASH_ENV"
            echo "export VERSION='<< parameters.version >>'" >> "$BASH_ENV"
            echo "export COMMIT_MSG='$(git show -s --format=%s HEAD | jq -R . | sed -e 's/^"//' -e 's/"$//')'" >> "$BASH_ENV"
      - slack/notify:
          event: pass
          channel: server-alerts
          custom: |
            {
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "$HEADER_TEXT",
                    "emoji": true
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Project:*\n$CIRCLE_PROJECT_REPONAME"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Author:*\n$CIRCLE_USERNAME"
                    }
                  ]
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Version:*\n$VERSION"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*CircleCI Build:*\n<$CIRCLE_BUILD_URL|$CIRCLE_BUILD_NUM>"
                    }
                  ]
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Commit Message:*\n$COMMIT_MSG"
                  }
                }
              ]
            }
